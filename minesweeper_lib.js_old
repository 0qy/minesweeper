// Expects a `board` object in global scope
// Returns a subset of the `cells` array, including only those cells
// which are adjacent to `row`, `col`
function getSurroundingCells (row, col) {
  var columns = getRange(getLowerBound(col), getUpperBound(col))
  var rows = getRange(getLowerBound(row), getUpperBound(row))
  return board.cells
    .filter(function (cell) {
      return columns.includes(cell.col) && rows.includes(cell.row)
    })
}

// For the given DOM element, displays surrounding mine counts
// under the following conditions:
//  - cell is not a mine
//  - cell has not already been checked
function showSurrounding (element) {
  getSurroundingCells(getRow(element), getCol(element))
    .filter(function (cell) {
      return !cell.isMine
    })
    .filter(function (cell) {
      // Avoid breaking the call stack with recurrent checks on same cell
      return !cell.isProcessed
    })
    .forEach(setInnerHTML)
}

// For the given cell object, set innerHTML to cell.surroundingMines
// under the following conditions:
//  - cell has not been marked by the user
//  - surroundingMines is > 0
// If surroundingMines is 0, greedily attempt to expose as many more cells
// as possible.
function setInnerHTML (cell) {
  cell.isProcessed = true
  var rowClass = 'row-' + cell.row
  var colClass = 'col-' + cell.col
  var element = document.getElementsByClassName(rowClass + ' ' + colClass)[0]
  if (element.innerHTML !== '') {
    return
  }
  if (element.classList.contains('marked')) {
    return
  }
  element.innerHTML = cell.surroundingMines > 0 ? 
    cell.surroundingMines : ''
  if (element.classList.contains('hidden')) {
    element.classList.remove('hidden')
    if (cell.surroundingMines === 0) {
      return showSurrounding(element)
    }
  }
}

function getRange(begin, end) {
  return Array.apply(begin, Array(end - begin + 1))
    .map(function (n, i) {
      return begin + i
    })
}

function getLowerBound (n) {
  return n - 1 < 0 ? 0 : n -1
}

function getUpperBound (n) {
  var limit = board.MAX_CELLS-1 || 4
  return n + 1 > limit ? limit : n + 1
}

function showCell (e) {
  e.target.classList.remove('hidden')
  if (e.target.classList.contains('mine')) {
    return showAllMines()
  }
  showSurrounding(e.target)
  checkForWin()
}

function markCell (e) {
  e.preventDefault()
  e.target.classList.toggle('marked')
  e.target.classList.remove('hidden')
  e.target.innerHTML = ''
  board.cells
    .find(function (cell) {
      return cell.row === getRow(e.target) && cell.col === getCol(e.target)
    })
    .isMarked = true
  checkForWin()
}

function markCell (e) {
  e.preventDefault()
  e.target.classList.toggle('marked')
  e.target.classList.remove('hidden')
  e.target.innerHTML = ''
  board.cells
    .find(function (cell) {
      return cell.row === getRow(e.target) && cell.col === getCol(e.target)
    })
    .isMarked = true
  checkForWin()
}

function showAllMines () {
  var mines = document.getElementsByClassName('mine')
  for (var i = 0; i < mines.length; i++) {
    mines[i].classList.remove('hidden')
    mines[i].classList.remove('marked')
  }
}

function getLoc(element, coordinate) {
  for (var i = 0; i < element.classList.length; i++) {
    if (element.classList[i].substring(0, 3) === coordinate) {
      return parseInt(element.classList[i].split('-')[1], 10)
    }
  }
  return null
}

function getRow (element) {
  return getLoc(element, 'row')
}

function getCol (element) {
  return getLoc(element, 'col')
}

function addListeners (element) {
  element.addEventListener('click', showCell)
  element.addEventListener('contextmenu', markCell)
}

